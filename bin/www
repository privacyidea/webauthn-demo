#!/usr/bin/env node

/*
 * Server-side entrypoint.
 *
 * This script contains the code to launch the web server hosting the application. If you just want to understand the
 * WebAuthn part of the example, you do not need to read any of this.
 */

/**
 * Module dependencies.
 */
const dotenv = require('dotenv').config();
const app = require('../app');
const debug = require('debug')('webauthn-demo:server');
const https = require('https');

// FIXME These are pre-built self-signed certificates. Do not use these in production.
const snakeoil = require('@dazld/snakeoil-certs');

/*
 * Load environment variables from .env file.
 */
if (dotenv.error) {
    throw dotenv.error;
} else {
    console.log("Loaded configuration:\n", dotenv.parsed);
}

/*
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * HTTP server.
 */
const server = https.createServer(
    {
        key: snakeoil.serviceKey,
        cert: snakeoil.certificate
    },
    app);

/*
 * Listen on provided port, on all network interfaces.
 */
debug('start listening');

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*
 * Function definitions.
 */

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
